security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    encoders:
        App\Entity\User:
            algorithm: bcrypt

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        
        in_database:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login:
            pattern: ^/api/login$
            stateless: true
            provider: 'in_database'
            json_login:
                check_path: /api/login # or api_login_check as defined in config/routes.yaml
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        users:
            pattern:   ^/api/users$
            methods: [PUT,GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        products:
            pattern: ^/api/products$
            methods: [GET,POST]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        products_id:
            pattern: ^/api/products/{id}$
            methods: [PUT,DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        carts:
            pattern: ^/api/carts$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        carts_id:
            pattern: ^/api/carts/{id}$
            methods: [POST,DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

        orders:
            pattern:   ^/api/orders$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        orders_id:
            pattern: ^api/orders/{id}$
            methods: [GET]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        main:
            lazy: true
            

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/users$, roles: IS_AUTHENTICATED_FULLY, methods: [PUT,GET]}
        - { path: ^/api/products$, roles: IS_AUTHENTICATED_FULLY, methods: [POST]}
        - { path: ^/api/products/id$, roles: IS_AUTHENTICATED_FULLY, methods: [PUT,DELETE]}
        - { path: ^/api/carts$, roles: IS_AUTHENTICATED_FULLY, methods: [GET]}
        - { path: ^/api/cart/id$, roles: IS_AUTHENTICATED_FULLY, methods: [POST,DELETE]}
        - { path: ^/api/orders$, roles: IS_AUTHENTICATED_FULLY, methods: [GET]}
        - { path: ^/api/orders/id$, roles: IS_AUTHENTICATED_FULLY, methods: [GET]}

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
